directive @embedded on OBJECT

directive @collection(name: String!) on OBJECT

directive @index(name: String!) on FIELD_DEFINITION

directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION

directive @relation(name: String) on FIELD_DEFINITION

directive @unique(index: String) on FIELD_DEFINITION

# 'Community' input values
input CommunityInput {
  name: String!
  purpose: String
  icon: String
}

input CreatuserInput {
  username: String!
  password: String!
}

scalar Date

input LoginUserInput {
  username: String!
  password: String!
}

type Mutation {
  # Update an existing document in the collection of 'User'
  updateUser(
    # The 'User' document's ID
    id: ID!

    # 'User' input values
    data: UserInput!
  ): User
  createUser(data: CreatuserInput!): String!

  # Update an existing document in the collection of 'Community'
  updateCommunity(
    # The 'Community' document's ID
    id: ID!

    # 'Community' input values
    data: CommunityInput!
  ): Community

  # Delete an existing document in the collection of 'Community'
  deleteCommunity(
    # The 'Community' document's ID
    id: ID!
  ): Community

  # Delete an existing document in the collection of 'User'
  deleteUser(
    # The 'User' document's ID
    id: ID!
  ): User

  # Partially updates an existing document in the collection of 'User'. It only modifies the values that are specified in the arguments. During execution, it verifies that required fields are not set to 'null'.
  partialUpdateUser(
    # The 'User' document's ID
    id: ID!

    # 'User' input values
    data: PartialUpdateUserInput!
  ): User
  login(data: LoginUserInput!): String!

  # Create a new document in the collection of 'Community'
  createCommunity(
    # 'Community' input values
    data: CommunityInput!
  ): Community!

  # Partially updates an existing document in the collection of 'Community'. It only modifies the values that are specified in the arguments. During execution, it verifies that required fields are not set to 'null'.
  partialUpdateCommunity(
    # The 'Community' document's ID
    id: ID!

    # 'Community' input values
    data: PartialUpdateCommunityInput!
  ): Community
}

# 'Community' input values
input PartialUpdateCommunityInput {
  name: String
  purpose: String
  icon: String
}

# 'User' input values
input PartialUpdateUserInput {
  username: String
}

scalar Time

# 'User' input values
input UserInput {
  username: String!
}

type Community {
  name: String!

  # The document's ID.
  _id: ID!
  icon: String
  purpose: String

  # The document's timestamp.
  _ts: Long!
}

type Query {
  # Find a document from the collection of 'Community' by its id.
  findCommunityByID(
    # The 'Community' document's ID
    id: ID!
  ): Community

  # Find a document from the collection of 'User' by its id.
  findUserByID(
    # The 'User' document's ID
    id: ID!
  ): User
}

type User {
  # The document's ID.
  _id: ID!

  # The document's timestamp.
  _ts: Long!
  username: String!
}

# The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
scalar Long
